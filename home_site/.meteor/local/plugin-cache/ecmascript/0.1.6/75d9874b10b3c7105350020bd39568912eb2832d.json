{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"if (Meteor.isClient) {\n  // counter starts at 0\n  Session.setDefault('page', 'property');\n\n  UI.body.helpers({\n    isPage: function (page) {\n      //sets up page function\n      return Session.equals('page', page);\n    }\n  });\n\n  UI.body.events({\n    'click .clickChangesPage': function (event, template) {\n      //on event change template\n      Session.set('page', event.currentTarget.getAttribute('data-page')); //to whatever is in data-page\n    }\n  });\n\n  Template.contactFormTemplate.events({\n    'submit form#contactForm': function (e) {\n      var contactForm = $(e.currentTarget),\n          fname = contactForm.find('#firstName').val(),\n          lname = contactForm.find('#lastName').val(),\n          email = contactForm.find('#email').val(),\n          phone = contactForm.find('#phone').val(),\n          message = contactForm.find(\"#message\").val();\n\n      //isFilled and isEmail are my helper methods, which checks if variable exists or is email address valid\n      if (isFilled(fname) && isFilled(lname) && isFilled(email) && isFilled(phone) && isFilled(message) && isEmail(email)) {\n        var dataText = \"Message from: \" + fname + \" \" + lname + \"\\rEmail: \" + email + \"\\rPhone: \" + phone + \"\\rContent:\" + message;\n\n        Meteor.call('sendEmail', dataText);\n        //throwAlert is my helper method which creates popup with message\n        throwAlert('Email send.', 'success');\n      } else {\n        throwAlert('An error occurred. Sorry', 'error');\n        return false;\n      }\n    }\n  });\n\n  // helper code for the template called secondPage, whic is the Map Page\n  Template.mapLoc.helpers({\n    // helper text for olympia template\n    olympia: [{ text: \"Church of the Good Shepherd - 1601 North Street SE\" }]\n  });\n\n  // declare an array containing each drop box location which get listed as arrays\n  // the 0th element in each location array is the name of the location and address\n  // the 1st element in each location array is the global latitude\n  // the 2nd element of each location array is the global longitutde\n  var locations = [\n  //Olympia Area\n  [\"Church of the Good Shepherd - 1601 North Street SE\", 47.015693, -122.880327, \"http://maps.google.com/maps?q=loc:\"]];\n\n  // initialize variable for acquiring the users position(latitude and Longitutde)\n  var latLng;\n\n  Template.mapLoc.onCreated(function () {\n    // We can use the `ready` callback to interact with the map API once the map is ready.\n    GoogleMaps.ready(\"exampleMap\", function (map) {\n      // set variable latLng to get geolocation from device GPS services if they are turned on\n      latLng = Geolocation.latLng();\n      // initilize and set variable to creat google maps marker for users current GPS position\n      var userPos = new google.maps.Marker({\n        // position of the marker set to variable latLng\n        position: latLng,\n        // set the icon to the google maps yellow-person\n        icon: 'https://www.google.com/help/hc/images/maps_street_view.png',\n        // set google maps marker animation to DROP\n        animation: google.maps.Animation.DROP,\n        // tell it which map to load on, this case map.instance\n        map: map.instance\n      });\n\n      // initialize variable which gets a google maps infoWindow for each marker\n      var infowindow = new google.maps.InfoWindow();\n      // initialize variables for drop box markers, markers, and iterator called i\n      var markers, i;\n      // iterate over all of the items in the locations variable array defined above\n      for (i = 0; i < locations.length; i++) {\n        // set variable markers to new google maps marker\n        markers = new google.maps.Marker({\n          // the position of this new marker should be the lat and long of the drop box, which are the 1st and 2nd\n          // elements of the locations arrays\n          position: new google.maps.LatLng(locations[i][1], locations[i][2]),\n          // url for each location marker NOT SET UP YET\n          url: locations[i][3] + locations[i][1] + \",\" + locations[i][2],\n          // tell it which map to load on, this case map.instance\n          map: map.instance\n        });\n        // add a google map event listener to check if a drop box marker is clicked\n        google.maps.event.addListener(markers, 'click', (function (markers, i) {\n          return function () {\n            // tell the contents of the infoWindow to be set to the 0th elements in the locations array\n            infowindow.setContent(locations[i][0]);\n            window.location.href = markers.url;\n            // tell the infoWindow which map to load on, this care map.instance\n            infowindow.open(map.instance, markers);\n          };\n          // note here\n        })(markers, i));\n      };\n    });\n  });\n\n  // helper code for secondPage, which is the Map Page\n  Template.mapLoc.helpers({\n    exampleMapOptions: function () {\n      // set latLng to Geolocation position from GPS services\n      latLng = Geolocation.latLng();\n      // check to see if google maps has loaded and that variable latLng is not NULL\n      if (GoogleMaps.loaded() && latLng) {\n        // map initialization options if the above was true\n        return {\n          // set the center of the map to your GPS positions\n          center: new google.maps.LatLng(latLng.lat, latLng.lng),\n          // set it so you cannot use the scrollwheel to manipulate the zoom of the map\n          scrollwheel: false,\n          // set it so you cannot use your finger to drag the map around on mobile\n          draggable: false,\n          // set the zoom of the map when it loads to 14 (0 is all of earth, 20 is ontop of you)\n          zoom: 14\n        };\n      }\n      // if the map is loaded but Geolocation is not available, center map around Thurston County\n      /*else if(GoogleMaps.loaded()) {\n        return {\n        // set the center of the map to Thurston County\n        center: new google.maps.LatLng(47.0425, -122.8931),\n        // set it so you cannot use the scrollwheel to manipulate the zoom of the map\n        scrollwheel: false,\n        // set it so you cannot use your finger to drag the map around on mobile\n        draggable: false,\n        zoom: 10\n        };\n      }  */\n      console.log(\"Map is ready and showing\");\n    }\n  });\n}\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n  });\n}","ast":null,"map":{"version":3,"sources":["/home_site.js"],"names":[],"mappings":"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","file":"/home_site.js.map","sourcesContent":["if (Meteor.isClient) {\n  // counter starts at 0\n  Session.setDefault('page', 'property');\n\n    UI.body.helpers({\n        isPage: function(page){//sets up page function\n            return Session.equals('page', page)\n        }\n    });\n\n    UI.body.events({\n        'click .clickChangesPage': function(event, template){//on event change template\n            Session.set('page', event.currentTarget.getAttribute('data-page'))//to whatever is in data-page\n        }\n    });\n\n    Template.contactFormTemplate.events({\n      'submit form#contactForm':function(e){\n        var contactForm = $(e.currentTarget),\n          fname = contactForm.find('#firstName').val(),\n          lname = contactForm.find('#lastName').val(),\n          email = contactForm.find('#email').val(),\n          phone = contactForm.find('#phone').val(),\n          message = contactForm.find(\"#message\").val();\n\n        //isFilled and isEmail are my helper methods, which checks if variable exists or is email address valid\n        if(isFilled(fname) && isFilled(lname) && isFilled(email) && isFilled(phone) && isFilled(message) && isEmail(email)){\n          var dataText = \"Message from: \" + fname + \" \" + lname + \"\\rEmail: \" + email + \"\\rPhone: \" + phone + \"\\rContent:\" + message;\n\n          Meteor.call('sendEmail', dataText);\n          //throwAlert is my helper method which creates popup with message\n          throwAlert('Email send.', 'success');\n        }else{\n          throwAlert('An error occurred. Sorry', 'error');\n          return false;\n        }\n      }\n  });\n\n    // helper code for the template called secondPage, whic is the Map Page\n  Template.mapLoc.helpers({\n    // helper text for olympia template\n    olympia: [\n      { text: \"Church of the Good Shepherd - 1601 North Street SE\"}\n    ]\n  });\n\n  // declare an array containing each drop box location which get listed as arrays\n  // the 0th element in each location array is the name of the location and address\n  // the 1st element in each location array is the global latitude \n  // the 2nd element of each location array is the global longitutde\n  var locations = [\n    //Olympia Area\n    [\"Church of the Good Shepherd - 1601 North Street SE\", 47.015693, -122.880327, \"http://maps.google.com/maps?q=loc:\"],\n\n  ];\n\n  // initialize variable for acquiring the users position(latitude and Longitutde)\n  var latLng;\n\n  Template.mapLoc.onCreated(function() {\n    // We can use the `ready` callback to interact with the map API once the map is ready.\n    GoogleMaps.ready(\"exampleMap\", function(map) {\n      // set variable latLng to get geolocation from device GPS services if they are turned on\n      latLng = Geolocation.latLng();\n      // initilize and set variable to creat google maps marker for users current GPS position\n      var userPos = new google.maps.Marker({\n        // position of the marker set to variable latLng\n        position: latLng,\n        // set the icon to the google maps yellow-person\n        icon: 'https://www.google.com/help/hc/images/maps_street_view.png',\n        // set google maps marker animation to DROP\n        animation: google.maps.Animation.DROP,\n        // tell it which map to load on, this case map.instance\n        map: map.instance\n      });\n\n      // initialize variable which gets a google maps infoWindow for each marker\n      var infowindow = new google.maps.InfoWindow();\n      // initialize variables for drop box markers, markers, and iterator called i\n      var markers, i;\n      // iterate over all of the items in the locations variable array defined above\n      for(i = 0; i < locations.length; i++) {\n        // set variable markers to new google maps marker\n        markers = new google.maps.Marker({\n          // the position of this new marker should be the lat and long of the drop box, which are the 1st and 2nd\n          // elements of the locations arrays\n          position: new google.maps.LatLng(locations[i][1], locations[i][2]),\n          // url for each location marker NOT SET UP YET\n          url: locations[i][3]+locations[i][1]+\",\"+locations[i][2],\n          // tell it which map to load on, this case map.instance\n          map: map.instance\n        });\n        // add a google map event listener to check if a drop box marker is clicked\n        google.maps.event.addListener(markers, 'click', (function(markers, i) {\n          return function() {\n            // tell the contents of the infoWindow to be set to the 0th elements in the locations array\n            infowindow.setContent(locations[i][0]);\n            window.location.href = markers.url;\n            // tell the infoWindow which map to load on, this care map.instance\n            infowindow.open(map.instance, markers);\n          }\n          // note here\n        })(markers, i));\n      };\n    });\n  });\n\n  // helper code for secondPage, which is the Map Page\n  Template.mapLoc.helpers({\n    exampleMapOptions: function() {\n      // set latLng to Geolocation position from GPS services\n      latLng = Geolocation.latLng();\n      // check to see if google maps has loaded and that variable latLng is not NULL\n      if (GoogleMaps.loaded() && latLng) {\n        // map initialization options if the above was true\n        return {\n          // set the center of the map to your GPS positions \n          center: new google.maps.LatLng(latLng.lat, latLng.lng),\n          // set it so you cannot use the scrollwheel to manipulate the zoom of the map\n          scrollwheel: false,\n          // set it so you cannot use your finger to drag the map around on mobile\n          draggable: false,\n          // set the zoom of the map when it loads to 14 (0 is all of earth, 20 is ontop of you)\n          zoom: 14\n        };\n      }\n      // if the map is loaded but Geolocation is not available, center map around Thurston County\n      /*else if(GoogleMaps.loaded()) {\n        return {\n        // set the center of the map to Thurston County\n        center: new google.maps.LatLng(47.0425, -122.8931),\n        // set it so you cannot use the scrollwheel to manipulate the zoom of the map\n        scrollwheel: false,\n        // set it so you cannot use your finger to drag the map around on mobile\n        draggable: false,\n        zoom: 10\n        };\n      }  */\n      console.log(\"Map is ready and showing\");\n    }\n  });\n\n\n}\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n  });\n}\n"]},"hash":"75d9874b10b3c7105350020bd39568912eb2832d"}
