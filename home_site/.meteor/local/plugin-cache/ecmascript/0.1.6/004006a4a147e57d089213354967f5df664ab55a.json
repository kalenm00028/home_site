{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"if (Meteor.isClient) {\n  // counter starts at 0\n  Session.setDefault('page', 'property');\n\n  Meteor.startup(function () {\n    console.log(\"Load Maps\");\n    GoogleMaps.load();\n  });\n\n  UI.body.helpers({\n    isPage: function (page) {\n      //sets up page function\n      return Session.equals('page', page);\n    }\n  });\n\n  UI.body.events({\n    'click .clickChangesPage': function (event, template) {\n      //on event change template\n      Session.set('page', event.currentTarget.getAttribute('data-page')); //to whatever is in data-page\n    }\n  });\n\n  Template.contact.events({\n    'submit form#contactForm': function (e) {\n      var contactForm = $(e.currentTarget),\n          fname = contactForm.find('#firstName').val(),\n          lname = contactForm.find('#lastName').val(),\n          email = contactForm.find('#email').val(),\n          phone = contactForm.find('#phone').val(),\n          message = contactForm.find(\"#message\").val();\n\n      //isFilled and isEmail are my helper methods, which checks if variable exists or is email address valid\n      if (isFilled(fname) && isFilled(lname) && isFilled(email) && isFilled(phone) && isFilled(message) && isEmail(email)) {\n        var dataText = \"Message from: \" + fname + \" \" + lname + \"\\rEmail: \" + email + \"\\rPhone: \" + phone + \"\\rContent:\" + message;\n\n        Meteor.call('sendEmail', dataText);\n        //throwAlert is my helper method which creates popup with message\n        throwAlert('Email send.', 'success');\n      } else {\n        throwAlert('An error occurred. Sorry', 'error');\n        return false;\n      }\n    }\n  });\n\n  Template.mapLoc.helpers({\n    mapOptions: function () {\n      if (GoogleMaps.loaded()) {\n        return {\n          center: new google.maps.LatLng(46.922386, -122.667181),\n          zoom: 12\n        };\n      }\n    }\n  });\n\n  Template.mapLoc.onCreated(function () {\n    GoogleMaps.ready('map', function (map) {\n      google.maps.event.addListener(map.instance, 'click', function (event) {\n        Markers.insert({ lat: event.latLng.lat(), lng: event.latLng.lng() });\n        marker = new google.maps.Marker({\n          position: new google.maps.LatLng(46.922386, -122.667181)\n        });\n      });\n      console.log(\"Map ready\");\n    });\n  });\n\n  Markers = new Mongo.Collection('markers');\n}\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n  });\n}","ast":null,"map":{"version":3,"sources":["/home_site.js"],"names":[],"mappings":"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","file":"/home_site.js.map","sourcesContent":["if (Meteor.isClient) {\n  // counter starts at 0\n  Session.setDefault('page', 'property');\n\n  Meteor.startup(function() {\n    console.log(\"Load Maps\");\n    GoogleMaps.load();\n  });\n\n  UI.body.helpers({\n      isPage: function(page){//sets up page function\n          return Session.equals('page', page)\n      }\n  });\n\n  UI.body.events({\n      'click .clickChangesPage': function(event, template){//on event change template\n          Session.set('page', event.currentTarget.getAttribute('data-page'))//to whatever is in data-page\n      }\n  });\n\n  Template.contact.events({\n    'submit form#contactForm':function(e){\n      var contactForm = $(e.currentTarget),\n        fname = contactForm.find('#firstName').val(),\n        lname = contactForm.find('#lastName').val(),\n        email = contactForm.find('#email').val(),\n        phone = contactForm.find('#phone').val(),\n        message = contactForm.find(\"#message\").val();\n\n      //isFilled and isEmail are my helper methods, which checks if variable exists or is email address valid\n      if(isFilled(fname) && isFilled(lname) && isFilled(email) && isFilled(phone) && isFilled(message) && isEmail(email)){\n        var dataText = \"Message from: \" + fname + \" \" + lname + \"\\rEmail: \" + email + \"\\rPhone: \" + phone + \"\\rContent:\" + message;\n\n        Meteor.call('sendEmail', dataText);\n        //throwAlert is my helper method which creates popup with message\n        throwAlert('Email send.', 'success');\n      }else{\n        throwAlert('An error occurred. Sorry', 'error');\n        return false;\n      }\n    }\n  });\n\n  Template.mapLoc.helpers ({\n    mapOptions: function() {\n      if (GoogleMaps.loaded()) {\n        return {\n          center: new google.maps.LatLng(46.922386, -122.667181),\n          zoom: 12\n        };\n      }\n    }\n  });\n\n  Template.mapLoc.onCreated(function() {\n    GoogleMaps.ready('map', function(map) {\n      google.maps.event.addListener(map.instance, 'click', function(event) {\n        Markers.insert({ lat: event.latLng.lat(), lng: event.latLng.lng() });\n        marker = new google.maps.Marker({\n          position: new google.maps.LatLng(46.922386, -122.667181)\n        });\n      });\n      console.log(\"Map ready\");\n    });\n  });\n\n  Markers=new Mongo.Collection('markers');\n\n\n}\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n  });\n}\n"]},"hash":"004006a4a147e57d089213354967f5df664ab55a"}
